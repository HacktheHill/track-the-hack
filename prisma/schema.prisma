// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

// Necessary for Next auth
model Account {
  id                       String   @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String?  @db.Text
  refresh_token_expires_in Int?
  access_token             String?  @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String?  @db.Text
  session_state            String?
  ext_expires_in           Int?
  createdAt                DateTime @default(now())
  updatedAt                DateTime @default(now()) @updatedAt
  user                     User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id        String    @id @default(cuid())
  name      String?
  email     String?   @unique
  image     String?
  roles     Role[]
  accounts  Account[]
  sessions  Session[]
  Hacker    Hacker?
  Log       Log[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now()) @updatedAt
}

model Role {
  id        String   @id @default(cuid())
  name      RoleName @unique
  users     User[]
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model Hacker {
  id String @id @default(cuid())

  preferredLanguage                Locale
  firstName                        String
  lastName                         String
  email                            String
  phoneNumber                      String
  country                          String
  dateOfBirth                      DateTime
  gender                           Gender
  pronouns                         Pronouns
  raceEthnicity                    RaceEthnicity
  currentSchoolOrganization        String
  educationLevel                   EducationLevel
  major                            String
  linkedin                         String?
  github                           String?
  personalWebsite                  String?
  hackathonBefore                  Boolean
  hackathonDetails                 String?
  programmingLanguagesTechnologies String
  projectDescription               String
  participationReason              String
  learningGoals                    String
  emergencyContactName             String
  emergencyContactRelation         String
  emergencyContactPhoneNumber      String
  tShirtSize                       TShirtSize
  dietaryRestrictions              DietaryRestrictions
  specialAccommodations            String?
  additionalInfo                   String?
  travelOrigin                     String?
  travelAccommodations             TravelAccommodations?
  referralSource                   ReferralSource
  referralOther                    String?
  hthAgreements                    Boolean
  hthPromotions                    Boolean
  mlhCodeOfConduct                 Boolean
  mlhPrivacyTerms                  Boolean
  mlhPromotions                    Boolean

  hasResume        Boolean    @default(false)
  confirmed        Boolean    @default(false)
  unsubscribed     Boolean    @default(false)
  unsubscribeToken String?    @unique @default(cuid())
  acceptanceExpiry DateTime?
  walkIn           Boolean    @default(false)
  winner           Boolean    @default(false)
  userId           String?    @unique
  user             User?      @relation(fields: [userId], references: [id])
  presences        Presence[]
  createdAt        DateTime   @default(now())
  updatedAt        DateTime   @default(now()) @updatedAt
  presenceInfoId   String?

  @@index([userId])
  @@index([presenceInfoId])
}

model Presence {
  key       String   @id @unique
  value     Int
  label     String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  Hacker    Hacker?  @relation(fields: [hackerId], references: [id])
  hackerId  String?

  @@index([hackerId])
}

model Event {
  id          String    @id @default(cuid())
  start       DateTime
  end         DateTime
  name        String
  type        EventType @default(ALL)
  host        String?
  description String    @db.Text
  room        String
  tiktok      String?
  image       String?
  link        String?
  linkText    String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @default(now()) @updatedAt
}

model Log {
  id         Int      @id @default(autoincrement())
  timestamp  DateTime @default(now())
  sourceId   String
  sourceType String
  author     String   @default("")
  route      String
  action     String
  details    String?
  userId     String?
  user       User[]

  @@index([userId])
}

model Hardware {
  id                String   @id @default(cuid())
  imageURL          String?
  name              String
  quantityAvailable Int?
  manufacturer      String?
  model             String?
  type              String?
  description       String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @default(now()) @updatedAt

  @@index([name])
}

enum Locale {
  EN
  FR
}

enum RoleName {
  ADMIN
  HACKER
  ORGANIZER
  SPONSOR
}

enum EventType {
  ALL
  WORKSHOP
  SOCIAL
  CAREER_FAIR
  FOOD
}

enum Gender {
  MAN
  WOMAN
  NON_BINARY
  OTHER
  PREFER_NOT_TO_ANSWER
}

enum Pronouns {
  HE_HIM
  SHE_HER
  THEY_THEM
  OTHER
  PREFER_NOT_TO_ANSWER
}

enum RaceEthnicity {
  AFRICAN
  CAUCASIAN
  EAST_ASIAN
  SOUTH_ASIAN
  MIDDLE_EASTERN
  HISPANIC_LATINO_SPANISH
  NATIVE_AMERICAN_ALASKAN_NATIVE
  OTHER
  PREFER_NOT_TO_ANSWER
}

enum EducationLevel {
  HIGH_SCHOOL
  UNDERGRADUATE
  GRADUATE
  OTHER
}

enum TShirtSize {
  XS
  S
  M
  L
  XL
  XXL
}

enum DietaryRestrictions {
  HALAL
  VEGETARIAN
  VEGAN
  KOSHER
  LACTOSE_INTOLERANCE
  GLUTEN_FREE
  NUTS
  SOY
  NONE
  OTHER
}

enum TravelAccommodations {
  GTA
  MONTREAL
  WATERLOO
  NONE
}

enum ReferralSource {
  STUDENT_ORGANIZATIONS
  FRIENDS
  UNIVERSITY_WEBSITE
  LINKEDIN
  INSTAGRAM
  TIKTOK
  FACEBOOK
  UNIVERSITY_EMAIL
  CLASS_ANNOUNCEMENTS
  HACKATHON_WEBSITES
  FLYERS
  PROFESSORS
  ONLINE_FORUMS
  ALUMNI_NETWORKS
  OTHER
}
