// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider     = "mysql"
    // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url          = env("DATABASE_URL")
    relationMode = "prisma"
}

// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? @db.Text
    refresh_token_expires_in Int?
    access_token             String? @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@index([userId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
}

model User {
    id            String       @id @default(cuid())
    name          String?
    email         String?      @unique
    emailVerified DateTime?
    image         String?
    role          Role         @default(HACKER)
    accounts      Account[]
    sessions      Session[]
    HackerInfo    HackerInfo[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model HackerInfo {
    id                           String         @id @default(cuid()) @map("submissionID")
    preferredLanguage            Language
    email                        String
    firstName                    String
    lastName                     String
    gender                       String
    phoneNumber                  String
    university                   String
    studyLevel                   String
    studyProgram                 String
    graduationYear               Int?
    attendanceType               AttendanceType
    attendanceLocation           String
    transportationRequired       Boolean
    dietaryRestrictions          String
    accessibilityRequirements    String
    shirtSize                    ShirtSize?
    emergencyContactName         String
    emergencyContactRelationship String
    emergencyContactPhoneNumber  String
    numberOfPreviousHackathons   Int?
    linkGithub                   String
    linkLinkedin                 String
    linkPersonalSite             String
    linkResume                   String         @db.Text
    lookingForwardTo             String         @db.Text
    formStartDate                DateTime
    formEndDate                  DateTime
    confirmed                    Boolean        @default(false)
    user                         User?          @relation(fields: [userId], references: [id])
    userId                       String?
    unsubscribed                 Boolean        @default(false)
    unsubscribeToken             String?        @unique @default(cuid())
    onlyOnline                   Boolean        @default(false)
    acceptanceExpiry             DateTime?

    @@index([userId])
}

model Event {
    id          String    @id @default(cuid())
    start       DateTime
    end         DateTime
    name        String
    type        EventType @default(ALL)
    host        String
    description String
    room        String
    tiktok      String?
}

enum Language {
    EN
    FR
}

enum AttendanceType {
    IN_PERSON
    ONLINE
}

enum ShirtSize {
    S
    M
    L
    XL
    XXL
}

enum Role {
    HACKER
    ORGANIZER
    SPONSOR
}

enum EventType {
    ALL
    WORKSHOP
    SOCIAL
    CAREER_FAIR
    FOOD
}
