// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

// Necessary for Next auth
model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? @db.Text
  refresh_token_expires_in Int?
  access_token             String? @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? @db.Text
  session_state            String?
  ext_expires_in           Int?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id       String       @id @default(cuid())
  name     String?      @map("username")
  email        String?      @unique
  emailVerified DateTime?
  image        String?
  accounts     Account[]
  sessions     Session[]
  auditLog     AuditLog[]
  hacker       Hacker?     @relation( fields: [hackerId], references: [id])
  hackerId     String?     @unique 
  organizer    Organizer?  @relation( fields: [organizerId], references: [id])
  organizerId  String?     @unique
  sponsor      Sponsor?    @relation( fields: [sponsorId], references: [id])
  sponsorId    String?     @unique
}

model Hacker {
  id           String      @id @default(cuid())
  user         User?        
  personalInfo PersonalInfo?
  education    Education?
  emergency    EmergencyContact?
  preferences  Preferences? 
  socials      Socials?
  miscellaneousInfo         MiscellaneousInfo?
  events       Event[]
  presences    Presence[]
  responses    Response[]
  tags         Tag[]
}

model Sponsor {
  id           String     @id @default(cuid())
  personalInfo  PersonalInfo?
  user  User?
}

model Organizer {
  id           String     @id @default(cuid())
  personalInfo   PersonalInfo?
  user  User?    
}

model Question {
  id String @id @default(cuid())
  question String @db.Text
  event Event @relation(fields: [eventId], references: [id])
  eventId String
  responses Response[]
  wordMax     Int @default(250)
  wordMinimum Int @default(10)

  @@index([eventId])
}

model Response {
  responseId String @id @default(cuid())
  hacker Hacker @relation(fields: [hackerId], references: [id])
  hackerId String 
  question Question @relation(fields: [questionId], references: [id])
  questionId String
  response String @db.Text

  @@index([questionId])
  @@index([hackerId])
}

model Event {
  id          String    @id @default(cuid())
  start       DateTime
  end         DateTime
  name        String    @unique
  type        EventType @default(ALL)
  host        String?
  description String    @db.Text
  room        String
  tiktok      String?
  image       String?
  link        String?
  linkText    String?
  hacker      Hacker[]
  questions   Question[]
  tags        Tag[]
  presenceTypes PresenceType[]
  
}

model Presence {
  id String @id @default(cuid())
  hacker Hacker @relation(fields: [hackerId], references: [id])
  hackerId String
  presenceTypes PresenceType[]
  
  @@index([hackerId])
}

//If the there exists a relation between PresenceType and Presence, then the Hacker it belongs to is ch
model PresenceType {
  id String @id @default(cuid())
  presence Presence @relation(fields: [presenceId], references: [id]) 
  presenceId String
  event Event @relation(fields: [eventId], references: [id])
  eventId String
  name String

  @@index([presenceId])
  @@index([eventId])
}

model PersonalInfo {
  id                           String         @id @default(cuid())
  preferredLanguage            Language       @default(EN)
  email                        String
  firstName                    String
  lastName                     String
  gender                       String         @default("Prefer not to say")
  phoneNumber                  String
  city                         String?       
  hacker                       Hacker?         @relation(fields: [hackerId], references: [id])
  hackerId                     String?         @unique      
  sponsor                      Sponsor?       @relation(fields: [sponsorId], references: [id])
  sponsorId                    String?        @unique
  organizer                    Organizer?     @relation(fields: [organizerId], references: [id] )
  organizerId                  String?        @unique
}

model Education {
  id                           String         @id @default(cuid())
  university                   String?
  studyLevel                   String?
  studyProgram                 String?
  graduationYear               Int?
  Hacker                       Hacker?        @relation(fields: [hackerId], references: [id]) 
  hackerId                     String?        @unique
}

model EmergencyContact {
  id                           String         @id @default(cuid())
  name                         String?
  phoneNumber                  String?
  relationship                 String?
  Hacker                       Hacker?        @relation(fields: [hackerId], references: [id]) 
  hackerId                     String?        @unique
}

model Socials {
  id                           String         @id @default(cuid())
  hackerId                     String?        @unique
  github                       String?
  linkedin                     String?
  personalSite                 String?
  Hacker                       Hacker?        @relation(fields: [hackerId], references: [id], map: "hacker_emergency_contact_fk") 
}

model Preferences {
  id                           String         @id @default(cuid())
  dietaryRestrictions          String?        @db.Text
  accessibilityRequirements    String?        @db.Text
  transportationRequired       Boolean        @default(false)
  attendanceType               AttendanceType @default(IN_PERSON)
  shirtSize                    ShirtSize?
  hacker                     Hacker?        @relation(fields: [hackerId], references: [id])
  hackerId                   String?        @unique
  emailUnsubscribe           EmailUnsubscribe?  @relation(fields: [emailUnsubscribeId], references: [id])
  emailUnsubscribeId         String?        @unique
}

model EmailUnsubscribe {
  id                           String         @id @default(cuid())
  unsubscribed                 Boolean        @default(false)
  unsubscribeToken             String?        @unique @default(cuid())
  preferences                  Preferences?  
}

model MiscellaneousInfo {
  id                           String         @id @default(cuid())
  numberOfPreviousHackathons   Int?
  acceptanceExpiry             DateTime?
  walkIn                       Boolean        @default(false)
  waiver                       Boolean        @default(false)
  Hacker                       Hacker?        @relation(fields: [hackerId], references: [id])
  hackerId                     String?        @unique
}

//Can be used to add statuses/tags to hackers related to an event (winner of X challenge, accepted into X event, waitlisted on X event, etc...)
model Tag {
  id                           String         @id @default(cuid())
  value                        String
  event                        Event?    @relation(fields: [eventId], references: [id])
  eventId                      String?       @unique
  hacker                       Hacker    @relation(fields: [hackerId], references: [id])
  hackerId                     String
}

model Follow {
  id    String @id @default(cuid())
  email String @unique
}

model AuditLog {
  id        Int      @id @default(autoincrement())
  timestamp DateTime @default(now())
  userId    String   
  author    String   @default("")
  route     String
  action    String
  details   String?
  user      User[]

  @@index([userId])
}

model Payment {
  id          String   @id @default(cuid())
  companyName String   
  repName     String   
  amount      Int
  tier        Tiers
  logo        String
  paid        String
  date        DateTime
  invoice     String
}

model Link {
  id    String @id
  label String
  link  String
}

enum Language {
  EN
  FR
}

enum AttendanceType {
  IN_PERSON
  ONLINE
}

enum ShirtSize {
  S
  M
  L
  XL
  XXL
}

enum Role {
  HACKER
  ORGANIZER
  SPONSOR
}

enum EventType {
  ALL
  WORKSHOP
  SOCIAL
  CAREER_FAIR
  FOOD
}

enum Tiers {
  STARTUP
  MAYOR
  PREMIER
  GOVERNOR
  PRIME_MINISTER
  CUSTOM
}
