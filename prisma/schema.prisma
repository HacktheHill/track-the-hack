// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

// Necessary for Next auth
model Account {
  id                       String   @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String?  @db.Text
  refresh_token_expires_in Int?
  access_token             String?  @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String?  @db.Text
  session_state            String?
  ext_expires_in           Int?
  createdAt                DateTime @default(now())
  updatedAt                DateTime @default(now()) @updatedAt
  user                     User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  image         String?
  emailVerified DateTime?
  roles         Role[]
  accounts      Account[]
  sessions      Session[]
  Hacker        Hacker?
  Log           Log[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @default(now()) @updatedAt
}

model Role {
  id        String   @id @default(cuid())
  name      RoleName @unique
  users     User[]
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model Hacker {
  id String @id @default(cuid())

  preferredLanguage                Locale
  firstName                        String
  lastName                         String
  email                            String
  phoneNumber                      String
  country                          String
  age                              Int
  gender                           String?
  pronouns                         String?
  raceEthnicity                    String?
  currentSchoolOrganization        String
  educationLevel                   String
  major                            String
  linkedin                         String?
  github                           String?
  personalWebsite                  String?
  hackathonBefore                  Boolean
  hackathonDetails                 String     @db.Text
  programmingLanguagesTechnologies String     @db.Text
  projectDescription               String     @db.Text
  participationReason              String     @db.Text
  learningGoals                    String     @db.Text
  emergencyContactName             String
  emergencyContactRelation         String
  emergencyContactPhoneNumber      String
  tShirtSize                       TShirtSize
  dietaryRestrictions              String
  specialAccommodations            String?    @db.Text
  additionalInfo                   String?    @db.Text
  travelOrigin                     String?
  referralSource                   String?
  agreements                       Boolean
  promotions                       Boolean
  hasResume                        Boolean    @default(false)

  acceptanceStatus AcceptanceStatus @default(PENDING)
  acceptanceReason String           @default("none")
  acceptanceExpiry DateTime?

  unsubscribed     Boolean @default(false)
  unsubscribeToken String? @unique @default(cuid())

  confirmed Boolean @default(false)
  walkIn    Boolean @default(false)
  winner    Boolean @default(false)

  Team           Team?      @relation(fields: [teamId], references: [id])
  teamId         String?
  User           User?      @relation(fields: [userId], references: [id])
  userId         String?    @unique
  presences      Presence[]
  presenceInfoId String?

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@index([userId])
  @@index([presenceInfoId])
  @@index([teamId])
}

model Presence {
  id        String   @id @default(cuid())
  value     Int
  label     String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  Hacker    Hacker?  @relation(fields: [hackerId], references: [id])
  hackerId  String?

  @@index([hackerId])
}

model Team {
  id      String   @id @default(cuid())
  name    String   @unique
  hackers Hacker[]
}

model Event {
  id          String    @id @default(cuid())
  start       DateTime
  end         DateTime
  name        String
  type        EventType @default(ALL)
  host        String?
  description String    @db.Text
  room        String
  tiktok      String?
  image       String?
  link        String?
  linkText    String?
  maxCheckIns Int?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @default(now()) @updatedAt
}

model Log {
  id         Int      @id @default(autoincrement())
  timestamp  DateTime @default(now())
  sourceId   String
  sourceType String
  author     String   @default("")
  route      String
  action     String
  details    String?
  userId     String?
  user       User[]

  @@index([userId])
}

model Hardware {
  id                String   @id @default(cuid())
  imageURL          String?
  name              String
  quantityAvailable Int?
  manufacturer      String?
  model             String?
  type              String?
  description       String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @default(now()) @updatedAt

  @@index([name])
}

enum Locale {
  EN
  FR
}

enum RoleName {
  ADMIN
  HACKER
  ORGANIZER
  SPONSOR
  ACCEPTANCE
}

enum EventType {
  ALL
  WORKSHOP
  SOCIAL
  CAREER_FAIR
  FOOD
}

enum TShirtSize {
  XS
  S
  M
  L
  XL
  XXL
}

enum AcceptanceStatus {
  PENDING
  ACCEPTED
  WAITLISTED
  REJECTED
}
