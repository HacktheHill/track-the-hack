generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? @db.Text
  refresh_token_expires_in Int?
  access_token             String? @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? @db.Text
  session_state            String?
  ext_expires_in           Int?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id            String       @id @default(cuid())
  name          String?
  email         String?      @unique
  emailVerified DateTime?
  image         String?
  role          Role         @default(HACKER)
  passwordHash  String?      @db.Text
  salt          String?
  accounts      Account[]
  sessions      Session[]
  hackerInfo    HackerInfo[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model HackerInfo {
  id                           String         @id @default(cuid()) @map("submissionID")
  preferredLanguage            Language       @default(EN)
  email                        String
  firstName                    String
  lastName                     String
  gender                       String         @default("Prefer not to say")
  phoneNumber                  String
  university                   String?
  studyLevel                   String?
  studyProgram                 String?
  graduationYear               Int?
  attendanceType               AttendanceType @default(IN_PERSON)
  location                     String?        @map("attendanceLocation")
  transportationRequired       Boolean        @default(false)
  dietaryRestrictions          String         @db.Text
  accessibilityRequirements    String         @db.Text
  shirtSize                    ShirtSize?
  emergencyContactName         String
  emergencyContactRelationship String
  emergencyContactPhoneNumber  String
  numberOfPreviousHackathons   Int?
  linkGithub                   String?
  linkLinkedin                 String?
  linkPersonalSite             String?
  linkResume                   String?        @db.Text
  lookingForwardTo             String?        @db.Text
  formStartDate                DateTime?
  formEndDate                  DateTime?
  confirmed                    Boolean        @default(false)
  userId                       String?
  unsubscribed                 Boolean        @default(false)
  unsubscribeToken             String?        @unique @default(cuid())
  onlyOnline                   Boolean        @default(false)
  acceptanceExpiry             DateTime?
  walkIn                       Boolean        @default(false)
  winner                       Boolean        @default(false)
  user                         User?          @relation(fields: [userId], references: [id])
  presenceInfo                 PresenceInfo?

  @@index([userId])
}

model PresenceInfo {
  id           String     @id @default(cuid())
  checkedIn    Boolean    @default(false)
  breakfast1   Boolean    @default(false)
  lunch1       Boolean    @default(false)
  dinner1      Boolean    @default(false)
  breakfast2   Boolean    @default(false)
  lunch2       Boolean    @default(false)
  hackerInfoId String     @unique
  snacks       Boolean    @default(false)
  redbull      Boolean    @default(false)
  snacks2      Boolean    @default(false)
  lunch22      Boolean    @default(false)
  hackerInfo   HackerInfo @relation(fields: [hackerInfoId], references: [id])
}

model Payment {
  id           String   @id @default(cuid())
  company_name String
  amount       Int
  reps_name    String
  tier         Tiers
  logo         String
  paid         String
  date         DateTime
  invoice      String
}

model Event {
  id          String    @id @default(cuid())
  start       DateTime
  end         DateTime
  name        String
  type        EventType @default(ALL)
  host        String?
  description String    @db.Text
  room        String
  tiktok      String?
  image       String?
  link        String?
  linkText    String?
}

model Follow {
  id    String @id @default(cuid())
  email String @unique
}

model AuditLog {
  id        Int      @id @default(autoincrement())
  timestamp DateTime @default(now())
  user_id   String
  route     String
  action    String
  details   String?
  author    String   @default("")

  @@index([user_id])
}

model AuditLogToUser {
  A Int
  B String

  @@unique([A, B], map: "_AuditLogToUser_AB_unique")
  @@index([B], map: "_AuditLogToUser_B_index")
  @@map("_AuditLogToUser")
}

enum Language {
  EN
  FR
}

enum AttendanceType {
  IN_PERSON
  ONLINE
}

enum ShirtSize {
  S
  M
  L
  XL
  XXL
}

enum Role {
  HACKER
  ORGANIZER
  SPONSOR
}

enum EventType {
  ALL
  WORKSHOP
  SOCIAL
  CAREER_FAIR
  FOOD
}

enum Tiers {
  STARTUP
  MAYOR
  PREMIER
  GOVERNOR
  PRIME_MINISTER
  CUSTOM
}
