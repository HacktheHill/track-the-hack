import { type NextPage } from "next";
import { useSession } from "next-auth/react";
import Head from "next/head";
import { useEffect, useState } from "react";
import type { z } from "zod";

import Details from "../components/Details";
import Navbar from "../components/Menu";
import QRCode from "../components/QRCode";
import QRScanner from "../components/QRScanner";
import Table from "../components/Table";

import { trpc } from "../utils/api";
import type { roles } from "../utils/common";

const Home: NextPage = () => {
	const { data: sessionData } = useSession();

	return (
		<>
			<Head>
				<title>Track the Hack</title>
				<meta name="description" content="Generated by create-t3-app" />
				<link rel="icon" href="/favicon.ico" />
				<link rel="manifest" href="/manifest.json" />
				<link rel="android-chrome" sizes="192x192" href="/public/icons/android-chrome-192x192.png" />
				<link rel="android-chrome" sizes="512x512" href="/public/icons/android-chrome-512x512.png" />
				<link rel="apple-touch-icon" href="/public/icons/apple-touch-icon.png" />
				<link rel="apple-touch-icon-57x57" sizes="57x57" href="/public/icons/apple-touch-icon-57x57.png" />
				<link rel="apple-touch-icon-60x60" sizes="60x60" href="/public/icons/apple-touch-icon-60x60.png" />
				<link rel="apple-touch-icon-72x72" sizes="72x72" href="/public/icons/apple-touch-icon-72x72.png" />
				<link rel="apple-touch-icon-76x76" sizes="76x76" href="/public/icons/apple-touch-icon-76x76.png" />
				<link rel="apple-touch-icon-114x114" sizes="114x114" href="/public/icons/apple-touch-icon-114x114.png" />
				<link rel="apple-touch-icon-120x120" sizes="120x120" href="/public/icons/apple-touch-icon-120x120.png" />
				<link rel="apple-touch-icon-144x144" sizes="144x144" href="/public/icons/apple-touch-icon-144x144.png" />
				<link rel="apple-touch-icon-152x152" sizes="152x152" href="/public/icons/apple-touch-icon-152x152.png" />
				<link rel="favicon-16x" sizes="16x16" href="/public/icons/favicon-16x16.png" />
				<link rel="favicon-32x32" sizes="32x32" href="/public/icons/favicon-32x32.png" />
				<link rel="favicon-96x96" sizes="96x96" href="/public/icons/favicon-96x96.png" />
				<link rel="favicon-128x128" sizes="128x128" href="/public/icons/favicon-128x128.png" />
				<link rel="favicon-196x196" sizes="196x196" href="/public/icons/favicon-196x196.png" />
				<link rel="mstile-70x70" sizes="70x70" href="/public/icons/mstile-70x70.png" />
				<link rel="mstile-144x144" sizes="144x144" href="/public/icons/mstile-144x144.png" />
				<link rel="mstile-150x150" sizes="150x150" href="/public/icons/mstile-150x150.png" />
				<link rel="mstile-310x150" sizes="310x150" href="/public/icons/mstile-310x150.png" />
				<link rel="mstile-310x310" sizes="310x310" href="/public/icons/mstile-310x310.png" />
				<link rel="" sizes="" href="/public/icons/" />
				<meta name="theme-color" content="#2d3748" />
			</Head>
			<Navbar />
			<main className="p-4">
				<p>{sessionData && <span>Logged in as {sessionData.user?.name}</span>}</p>
				<View />
			</main>
		</>
	);
};

const View = () => {
	const { data: sessionData } = useSession();
	const [role, setRole] = useState<z.infer<typeof roles> | null>(null);

	const mutation = trpc.users.setRole.useMutation();
	const query = trpc.users.getRole.useQuery(
		{
			id: sessionData?.user?.id ?? "",
		},
		{
			enabled: !!sessionData?.user?.id,
		},
	);

	useEffect(() => {
		if (query.data) {
			setRole(query.data);
		}
	}, [query.data]);

	const handleChange = (event: React.ChangeEvent<HTMLSelectElement>) => {
		const { value } = event.target;
		mutation.mutate({
			id: sessionData?.user?.id ?? "",
			role: value.toUpperCase(),
		});
		setRole(value as z.infer<typeof roles>);
	};

	if (query.isLoading) return <p>Loading...</p>;
	if (query.isError) return <p>Error: {query.error.message}</p>;

	return (
		<>
			<div>
				<label htmlFor="role">Role</label>
				<select id="role" onChange={handleChange} value={role ?? ""}>
					<option value="ORGANIZER">Organizer</option>
					<option value="SPONSOR">Sponsor</option>
					<option value="HACKER">Hacker</option>
				</select>
			</div>
			{role === "ORGANIZER" && <OrganizerView />}
			{role === "SPONSOR" && <SponsorView />}
			{role === "HACKER" && <HackerView />}
		</>
	);
};

const OrganizerView = () => {
	const [id, setId] = useState<string | null>(null);
	return (
		<>
			<QRScanner setId={setId} />
			{id}
			{id && <Details id={id} />}
			<Table />
		</>
	);
};

const SponsorView = () => {
	return (
		<>
			<Table />
		</>
	);
};

const HackerView = () => {
	return (
		<>
			<QRCode />
		</>
	);
};

export default Home;
